#!/usr/bin/env node

var cli = require('cli').enable('glob'),
  fs = require('fs'),
  url = require('url'),
  async = require('async'),
  Har = require('../lib/har');

cli.setUsage('harlog [OPTIONS] <file.har>');

var options = cli.parse({
  host: ['h', 'Host Filter (only include matching entries)', 'string', ''],
  status: ['s', 'Status filter (error: 4xx or 5xx; success: 2xx: redirect:3xx)', 'string'],
  min: ['', 'Minimum response time Filter', 'number'],
  max: ['', 'Maximum response time Filter', 'number'],
  format: ['f', 'Output Format (text | json)', 'string', 'text'],
  verbose: ['v', 'Produce more verbose output']
});

var verbose = options.verbose ? cli.info : function() {};

var logHar = function(content) {
  var har = new Har(content);
  if (options.host) {
    har.selectHost(options.host);
  }
  if (options.min || options.max) {
    har.selectResponseTime(options.min || 0, options.max || Infinity);
  }
  if (options.status) {
    var range = {
      success: /2\d\d/,
      redirect: /3\d\d/,
      error: /(4|5)\d\d/,
    };
    har.selectStatusCode(range[options.status] || /.*/);
  }
  var log = har.toLog(options.format);
  if (options.format === 'json') {
    console.log(JSON.stringify(log, null, '  '));
  } else {
    if (log.length > 0) {
      console.log(log.join('\n'));
    }
  }
};

var parseHarFile = function(file) {
  return function(callback) {
    verbose('Parsing ' + file);
    fs.readFile(file, 'utf-8', function(err, content) {
      if (!err) {
        try {
          logHar(content);
        } catch (e) {
          callback(e);
        }
      }
      callback(err);
    });
  };
};

if (cli.args.length > 0) {
  verbose('Parsing ' + cli.args.length + ' files');
  async.series(cli.args.map(parseHarFile), function(err) {
    if (err) {
      if (options.verbose) {
        throw (err);
      } else {
        cli.error(err);
      }
    }
  });
} else {
  cli.withStdin(logHar);
}
